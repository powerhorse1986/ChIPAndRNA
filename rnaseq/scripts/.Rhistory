percentVar <- round(100 * attr(pcadata, "percentVar"))
# plot PCA
p <- ggplot(pcadata, aes(PC1, PC2)) +
geom_text(aes(label=samples$pca_name), color = samples$data_color) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance"))
p
##################################################
## End: PCA plot
##################################################
# Top 1000
if (nrow(assay(rld)) >= 1000) {
var_genes <- apply(assay(rld), 1, var)
head(var_genes)
# Get the gene names for the top 1000 most variable genes
select_var <- names(sort(var_genes, decreasing=TRUE))[1:1000]
head(select_var)
# Subset assay(rld) for 1000 genes
highly_variable <- assay(rld)[select_var,]
dim(highly_variable)
# setup distance and clustering methods
distance.row = dist(highly_variable, method = "euclidean")
cluster.row = hclust(distance.row, method = "ward.D")
distance.col = dist(t(highly_variable), method = "euclidean")
cluster.col = hclust(distance.col, method = "ward.D")
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
# plot
heatmap.2(highly_variable, col=rev(morecols(50)), trace="none", scale="row",
Rowv = as.dendrogram(cluster.row), Colv = as.dendrogram(cluster.col),
key = TRUE, colCol = samples$data_color, margins = c(10,5),
labRow = FALSE)
}
# Top 500
if (nrow(assay(rld)) >= 500) {
var_genes <- apply(assay(rld), 1, var)
head(var_genes)
# Get the gene names for the top 500 most variable genes
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
head(select_var)
# Subset assay(rld) for 500 genes
highly_variable <- assay(rld)[select_var,]
dim(highly_variable)
# setup distance and clustering methods
distance.row = dist(highly_variable, method = "euclidean")
cluster.row = hclust(distance.row, method = "ward.D")
distance.col = dist(t(highly_variable), method = "euclidean")
cluster.col = hclust(distance.col, method = "ward.D")
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
# plot
heatmap.2(highly_variable, col=rev(morecols(50)), trace="none", scale="row",
Rowv = as.dendrogram(cluster.row), Colv = as.dendrogram(cluster.col),
key = TRUE, colCol = samples$data_color, margins = c(10,5),
labRow = FALSE)
}
# Top 100
if (nrow(assay(rld)) >= 100) {
var_genes <- apply(assay(rld), 1, var)
head(var_genes)
# Get the gene names for the top 100 most variable genes
select_var <- names(sort(var_genes, decreasing=TRUE))[1:100]
head(select_var)
# Subset assay(rld) for 100 genes
highly_variable <- assay(rld)[select_var,]
dim(highly_variable)
# setup distance and clustering methods
distance.row = dist(highly_variable, method = "euclidean")
cluster.row = hclust(distance.row, method = "ward.D")
distance.col = dist(t(highly_variable), method = "euclidean")
cluster.col = hclust(distance.col, method = "ward.D")
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
# plot
heatmap.2(highly_variable, col=rev(morecols(50)), trace="none", scale="row",
Rowv = as.dendrogram(cluster.row), Colv = as.dendrogram(cluster.col),
key = TRUE, colCol = samples$data_color, margins = c(10,5),
labRow = FALSE)
}
# Top 100
if (nrow(assay(rld)) >= 50) {
var_genes <- apply(assay(rld), 1, var)
head(var_genes)
# Get the gene names for the top 50 most variable genes
select_var <- names(sort(var_genes, decreasing=TRUE))[1:50]
head(select_var)
# Subset assay(rld) for 50 genes
highly_variable <- assay(rld)[select_var,]
dim(highly_variable)
# annotate w/ Ensembl Gene Symbols
anns <- getBM(
attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id", values = rownames(highly_variable), mart = mart)
merge_gene_sym <- merge(highly_variable, anns, by.x = 0, by.y = "ensembl_gene_id",
all.x = TRUE)
# replace NAs with the gene id
merge_gene_sym$external_gene_name[is.na(merge_gene_sym$external_gene_name)] <-
merge_gene_sym$Row.names[is.na(merge_gene_sym$external_gene_name)]
# setup distance and clustering methods
distance.row = dist(highly_variable, method = "euclidean")
cluster.row = hclust(distance.row, method = "ward.D")
distance.col = dist(t(highly_variable), method = "euclidean")
cluster.col = hclust(distance.col, method = "ward.D")
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
# plot
heatmap.2(as.matrix(merge_gene_sym[, 2:(ncol(merge_gene_sym) - 1)]), col=rev(morecols(50)), trace="none", scale="row", labRow = merge_gene_sym$external_gene_name,
Rowv = as.dendrogram(cluster.row), Colv = as.dendrogram(cluster.col),
key = TRUE, colCol = samples$data_color, c(10,10), cexRow = 0.5)
}
# helper function for violin plots to calculate
# various stats
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
setwd("~/NewDrive/Practice/ChIPAndRNA/rnaseq/scripts")
library(knitr)
knit_hooks$set(crop = knitr::hook_pdfcrop)
opts_chunk$set(echo=FALSE, results='hide', message=FALSE, warning=FALSE, fig.align="center", fig.width=8, fig.height=8)
#########################################
# Template R script for running a simple
# DESeQ2 differential gene expression
# analysis, using the output from Salmon
#########################################
library(tximport)
library(DESeq2)
library(apeglm)
library(biomaRt)
library(ReportingTools)
library(tidyverse)
library(openxlsx)
library(gplots)
library(RColorBrewer)
library(EnhancedVolcano)
library(DT)
library(reshape)
library(EnsDb.Hsapiens.v75)
#########################################
# Begin: Configuration setting
#########################################
# p-value threshold
pvalueThreshold <- 0.05
# BH adjusted p-value threshold
alpha <- 0.05
# log fold change threshold
lfcThreshold <- 0
# sample design file name
design_file_name <- "/home/mali/NewDrive/Practice/ChIPAndRNA/rnaseq/results/STAR/counts/samples.txt"
# define species being used
species <- "Homo Sapiens"
#species <- "Mus Musculus"
#species <- "Danio Rerio"
# set number of divisions to break samples and probes into
# for plotting violin plots
division <- 3
#########################################
# End: Configuration setting
#########################################
# get current working directory
dir <- "/home/mali/NewDrive/Practice/ChIPAndRNA/rnaseq/results/STAR/counts"
# list files in cwd
list.files(dir)
# define which biomart object to use
# GRCh37 (Hsapiens.v75) or mouse GRCm38 (Mmusculus.v79)) or Zebrafish
#define_reference_genome = NULL
mart <- NULL
if (species == 'Homo Sapiens') {
#define_reference_genome <- "EnsDb.Hsapiens.v75"
mart <- biomaRt::useMart(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
host = "https://grch37.ensembl.org")
} else if (species == 'Mus Musculus') {
#define_reference_genome <- "EnsDb.Mmusculus.v79"
mart <- biomaRt::useMart(biomart = "ensembl",
dataset = "mmusculus_gene_ensembl",
host = "https://nov2020.archive.ensembl.org")
} else if (species == 'Danio Rerio') {
mart <- biomaRt::useDataset(dataset = "drerio_gene_ensembl",
mart = useMart("ENSEMBL_MART_ENSEMBL",
host = "https://may2015.archive.ensembl.org"))
} else {
stop("A valid species was not specified.")
}
# Since there is no such an EnsDb database for Danio Rerio(Zebrafish),
# when skip this while it's Danio Rerio (By Li Ma, 05/18/2023)
#######################Start################################
#if (species != 'Danio Rerio') {
#  library(define_reference_genome, character.only = TRUE)
#}
#######################End################################
# helper function to return all gene names within the
# a data.frame, used by the publish funtion in the
# ReportingTools library (creates HTML reports)
add.anns <- function(df, mart, ...)
{
nm <- rownames(df)
anns <- getBM(
attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id", values = nm, mart = mart)
anns <- anns[match(nm, anns[, 1]), ]
colnames(anns) <- c("ID", "Gene Symbol")
df <- add_column(df, "Gene Symbol" = anns[,"Gene Symbol"], .after = "ID")
df
}
# helper function for violin plots to calculate
# various stats
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
# helper function to determine now many significant
# DEGs in the pos / neg direction giving a total number
num_degs_to_plot <- function(total_num_to_plot, total_pos_genes,
total_neg_genes) {
if ((total_pos_genes >= total_num_to_plot / 2) &&
(total_neg_genes >= total_num_to_plot / 2)) {
num_pos_to_plot <- total_num_to_plot / 2
num_neg_to_plot <- total_num_to_plot / 2
} else if ((total_pos_genes >= total_num_to_plot / 2) &&
(total_neg_genes < total_num_to_plot / 2)) {
num_pos_to_plot <- total_num_to_plot - total_neg_genes
num_neg_to_plot <- total_neg_genes
} else if ((total_pos_genes < total_num_to_plot / 2) &&
(total_neg_genes >= total_num_to_plot / 2)) {
num_pos_to_plot <- total_pos_genes
num_neg_to_plot <- total_num_to_plot - total_pos_genes
}
return_vector <- c(num_pos_to_plot, num_neg_to_plot)
names(return_vector) <- c("num_pos_to_plot", "num_neg_to_plot")
return(return_vector)
}
# function to return the top N pos and negative
# DEGs
get_top_n_pos_neg_degs <- function(rld, num_to_plot, top_pos_genes, top_neg_genes,
mart) {
# select the right number from the pos/neg groups
select_pos_de_genes <- top_pos_genes[1:num_to_plot["num_pos_to_plot"]]
select_neg_de_genes <- top_neg_genes[1:num_to_plot["num_neg_to_plot"]]
# extract those genes r-log values
plot.de.genes <- assay(rld)[rownames(rld) %in% select_pos_de_genes |
rownames(rld) %in% select_neg_de_genes,]
# annotate w/ Ensembl Gene Symbols
anns <- getBM(
attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id", values = rownames(plot.de.genes), mart = mart)
merge_gene_sym <- merge(plot.de.genes, anns, by.x = 0, by.y = "ensembl_gene_id",
all.x = TRUE)
# replace NAs with the gene id
merge_gene_sym$external_gene_name[is.na(merge_gene_sym$external_gene_name)] <-
merge_gene_sym$Row.names[is.na(merge_gene_sym$external_gene_name)]
return(merge_gene_sym)
}
########################################
# Begin: First differential analysis
########################################
########################################
# IMPORTANT: define below the list of
#            conditions to use in this
#            analysis and reference condition,
#            i.e., the condition to be in
#            the denominator of the log2FC ratio
########################################
# define list of conditions to use
list_conditions <- c("Group_OE", "Group_CT")
# define reference condition
reference_condition <- "Group_CT"
# define coefficient string
coeff_string <- "condition_Group_OE_vs_Group_CT"
########################################
# End: Important analysis config section
########################################
samples <- read.table(file.path(design_file_name), header = TRUE)
samples <- samples[samples$condition %in% list_conditions,]
samples
samples
files <- paste0(samples$mpps_id, ".count")
samples["fileName"] <- files
samples$mpps_id <- samples$shortname
# Generate a sampleTable for importing HTSeqCount data
#sampleTable <- samples[, c("mpps_id", "fileName", "condition")] %>%
#  dplyr::rename(sampleName = mpps_id)
samples <- samples %>%
dplyr::rename(sampleName = mpps_id) %>%
dplyr::relocate(fileName, .after = sampleName) %>%
dplyr::relocate(condition, .after = fileName)
# Convert condition into factors
samples$condition <- factor(samples$condition)
#sampleTable <- samples[, c("mpps_id", "fileName", "condition")] %>%
#  dplyr::rename(sampleName = mpps_id)
samples <- samples %>%
dplyr::rename(sampleName = mpps_id) %>%
dplyr::relocate(fileName, .after = sampleName) %>%
dplyr::relocate(condition, .after = fileName)
samples
dds <- DESeqDataSetFromHTSeqCount(sampleTable = samples,
directory = dir,
design = ~condition)
# assign the reference condition, i.e.,
# the one that goes in the denominator
dds$condition <- relevel(dds$condition, ref = reference_condition)
# output number of imported rows
nrow(dds)
# run DESeq
dds <- DESeq(dds)
# extract all results w/ alpha set to default = 0.1
res <- results(dds, alpha = alpha)
res
# get summary of res object
summary(res)
# get the number of significant DEGs
table(res$padj < alpha)
# get the name of the coefficients
resultsNames(dds)
res <- lfcShrink(dds, coef=coeff_string, type="apeglm")
# get the total number of DEGs
num_degs <- table(res$padj < alpha)[2]
display_study_design <- as.data.frame(samples)
colnames(display_study_design)[1] <- "id"
DT::datatable(display_study_design)
###########################################
#  Begin: Violin Plots of Samples
###########################################
# Log2 + 1
melt <- melt(counts(dds))
melt$value <- log2(melt$value + 1)
# split the data based on the sample name
melt <- split(melt, melt$X2)
# loop over results, plotting 'division' number of samples
# per plot
if (length(melt) <= division) {
k <- length(melt)
} else {
k <- division
}
j <- 1
while (j <= ceiling(nrow(samples) / k)) {
start <- ((j - 1) * k) + 1
end <- ((j - 1) * k) + k
range <- start:end
tmp_melt <- melt[range]
tmp_melt <- do.call(rbind.data.frame, tmp_melt)
tmp_melt <- merge(tmp_melt, samples, by.x = "X2", by.y = "shortname")
p <- ggplot(tmp_melt, aes(X2, value, fill = X2)) +
geom_violin(trim=FALSE) +
stat_summary(fun.data=data_summary) +
labs(title="", y="log2(count + 1)", x="samples") +
theme_minimal() + theme(legend.position = "none") +
scale_fill_manual(values=samples[start:end, "data_color"])
print(p)
j <- j + 1
}
###########################################
#  End: Violin Plots of Samples
###########################################
# annotate w/ Ensembl Gene Symbols
anns <- getBM(
attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id", values = rownames(res), mart = mart)
res_gene_symbol <- merge(as.data.frame(res), anns, by.x = 0, by.y = "ensembl_gene_id", all.x = TRUE)
# set labels
log2_fc_label <- paste0('|Log2FC| > 0.5')
adj_p_value_label <- paste0('padj-value < ', alpha)
adj_p_value_log2fc_label <- paste0(log2_fc_label, ' & ', adj_p_value_label)
# find largest -log(p)
largest_y_value = -log10(min(res$padj[!is.na(res$padj) &
res$padj > 0]))
# volcano plot x-axis limits
xlim <- c(-4.5, 4.5)
# volcano plot y-axis limits
ylim <- c(0, 31)
if (largest_y_value < ylim[2]) {
ylim[2] <- trunc(largest_y_value) + 1
}
# set shapes of points
keyvals.shape <- ifelse(abs(res$log2FoldChange) >= 4.5 |
-log10(res$padj) >= ylim[2] - 1, 17, 16)
keyvals.shape[is.na(keyvals.shape)] <- 16
names(keyvals.shape)[keyvals.shape == 16] <- 'Normal'
names(keyvals.shape)[keyvals.shape == 17] <- paste0('abs(Log2FC) >= ', xlim[2], ' or -log10p >= ', ylim[2] - 1)
res_volcano_plot <- res
# set log2FC outliers to max values
res_volcano_plot$log2FoldChange[!is.na(res_volcano_plot$log2FoldChange) &
res_volcano_plot$log2FoldChange >= xlim[2]] <- xlim[2]
res_volcano_plot$log2FoldChange[!is.na(res_volcano_plot$log2FoldChange) &
res_volcano_plot$log2FoldChange <= xlim[1]] <- xlim[1]
# set -log10p outliers to max values
res_volcano_plot$padj[!is.na(res_volcano_plot$padj) &
-log10(res_volcano_plot$padj) >= ylim[2] - 1] <- 1 * 10^(-ylim[2] + 1)
# produce volcano plot
EnhancedVolcano(res_volcano_plot,
lab = NA,
x = 'log2FoldChange',
y = 'padj',
pCutoff = alpha,
title = '',
subtitle = '',
FCcutoff = 0.5,
pointSize = 3.0,
labSize = 6.0,
shapeCustom = keyvals.shape,
legendLabels=c('Not sig.',
paste0(log2_fc_label),
adj_p_value_label,
adj_p_value_log2fc_label),
legendPosition = 'left') +
ggplot2::coord_cartesian(xlim=xlim, ylim=ylim) +
ggplot2::scale_y_continuous(breaks=c(seq(0, ylim[2], 5), round(-log10(alpha), 2))) +
ggplot2::scale_x_continuous(breaks=c(seq(-4,-1, 1), -0.5, 0, 0.5, seq(1, 4, 1)))
# prepare results for output table
res_output_table <- res
res_output_table$gene_symbol <- res_gene_symbol$external_gene_name
res_output_table$gene_symbol[is.na(res_output_table$gene_symbol)] <-
rownames(res_output_table)[is.na(res_output_table$gene_symbol)]
rownames(res_output_table) <- res_output_table$gene_symbol
res_output_table <- subset(res_output_table, select = -gene_symbol)
res_output_table <- res_output_table[!is.na(res_output_table$padj) &
res_output_table$padj < alpha, ]
# add color formatting to gene symbol
res_output_table <- as.data.frame(res_output_table) %>%
mutate(row.color = case_when(abs(log2FoldChange) > 0.5 & padj < alpha ~ "red",
abs(log2FoldChange) <= 0.5 ~ "blue"))
DT::datatable(res_output_table,
options = list(pageLength = 30,
columnDefs = list(list(visible=FALSE, targets=c("row.color"))))) %>%
formatStyle(columns = 0, valueColumns = "row.color", target = "cell",
color = styleEqual(sort(unique(res_output_table$row.color)), sort(unique(res_output_table$row.color))))
##################################################
## Begin: Sample-based hierarchical clustering
##        plot
##################################################
# perform a rlog transformation of the count data
rld <- rlog(dds, blind=FALSE)
sampleDists <- dist( t( assay(rld) ) )
sampleDists
# create matrix from sample distances
sampleDistMatrix <- as.matrix( sampleDists )
# set row and column names to be sample
rownames(sampleDistMatrix) <- paste(rld$shortname)
colnames(sampleDistMatrix) <- paste(rld$shortname)
# create color palette
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
# plot heatmap comparing all samples
hclustfunc <- function(x) hclust(x, method="complete")
fit <- hclustfunc(sampleDists)
heatmap.2(sampleDistMatrix, col=colors, trace="none", scale="none",
colCol = samples$data_color, colRow = samples$data_color,
Rowv = as.dendrogram(fit), Colv="Rowv", margins = c(10,10))
##################################################
## End: Sample-based hierarchical clustering
##        plot
##################################################
##################################################
## Begin: PCA plot
##################################################
# PCA, using rlog data
# call the plotPCA function, but just return an object (instead of plotting)
# so we can plot with ggplot2 instead
(pcadata <- plotPCA(rld, intgroup = c("condition"), returnData=TRUE))
# prepare percent variance calculation for display
percentVar <- round(100 * attr(pcadata, "percentVar"))
# plot PCA
p <- ggplot(pcadata, aes(PC1, PC2)) +
geom_text(aes(label=samples$pca_name), color = samples$data_color) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance"))
p
##################################################
## End: PCA plot
##################################################
##################################################
## Begin: Differentially Expressed Genes Heatmp/Clustering
##################################################
# get the total number of significant positive log2FC and
# the total number of significant negative log2FC
top_pos_records <- as.data.frame(res[!is.na(res$padj) & res$padj < alpha
& res$log2FoldChange > 0,])
top_pos_records <- top_pos_records[order(top_pos_records$log2FoldChange, decreasing = TRUE),]
top_pos_genes <- rownames(top_pos_records)
top_neg_records <- as.data.frame(res[!is.na(res$padj) & res$padj < alpha
& res$log2FoldChange < 0,])
top_neg_records <- top_neg_records[order(top_neg_records$log2FoldChange),]
top_neg_genes <- rownames(top_neg_records)
# Top 1000
if (num_degs >= 1000) {
# get the number of pos/neg DEGs to use
num_to_plot <- num_degs_to_plot(1000, length(top_pos_genes),
length(top_neg_genes))
# get top 1000 pos/neg results to plot
plot.de.genes <- get_top_n_pos_neg_degs(rld, num_to_plot, top_pos_genes,
top_neg_genes, mart)
# pair-down plot.de.genes to jsut the matrix of values for clustering
plot.de.genes.matrix <- as.matrix(plot.de.genes[, 2:(ncol(plot.de.genes) - 1)])
# setup distance and clustering methods
distance.row = dist(plot.de.genes.matrix, method = "euclidean")
cluster.row = hclust(distance.row, method = "ward.D")
distance.col = dist(t(plot.de.genes.matrix), method = "euclidean")
cluster.col = hclust(distance.col, method = "ward.D")
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
# plot
heatmap.2(as.matrix(plot.de.genes[, 2:(ncol(plot.de.genes) - 1)]), col=rev(morecols(50)), trace="none", scale="row",
Rowv = as.dendrogram(cluster.row), Colv = as.dendrogram(cluster.col),
key = TRUE, colCol = samples$data_color, margins = c(10,5),
labRow = FALSE)
}
samples
setwd("~/NewDrive/Practice/ChIPAndRNA/rnaseq/scripts")
